import os
import datetime


# Define the path to the file or directory
path = 'example_file.txt'


# Create a file to test with
with open(path, 'w') as file:
    file.write('This is an example file.')


# Get the last accessed time
atime = os.path.getatime(path)
# Get the last modified time
mtime = os.path.getmtime(path)


# Convert the timestamps to datetime objects
atime_dt = datetime.datetime.fromtimestamp(atime)
mtime_dt = datetime.datetime.fromtimestamp(mtime)


# Format the datetime objects
atime_str = atime_dt.strftime('%Y-%m-%d %H:%M:%S')
mtime_str = mtime_dt.strftime('%Y-%m-%d %H:%M:%S')


print(f'Last Accessed Time: {atime_str}')
print(f'Last Modified Time: {mtime_str}')


# Clean up by removing the file
os.remove(path)
======================================================================================================
import shutil
import os
# Create a source directory with a file
os.makedirs('source_dir', exist_ok=True)
with open('source_dir/file.txt', 'w') as f:
    f.write('Hello, world!')


# Copy the source directory to the destination
shutil.copytree('source_dir', 'destination_dir')
print('Directory copied successfully.')
======================================================================================================
import shutil
shutil.rmtree('source_dir')
shutil.rmtree('destination_dir')

===========================================================================================================
import shutil
import os
# Create a source file
source_file = 'source_file.txt'
with open(source_file, 'w') as f:
    f.write('This file will be moved.')

# Define the destination path
destination_file = 'destination_file.txt'

# Move the file
shutil.move(source_file, destination_file)

print('File moved successfully.')

# Verify the move
if os.path.exists(destination_file):
    print(f'File found at: {destination_file}')

# Clean up
os.remove(destination_file)
=========================================================================================================
import tempfile
import os
# Create a temporary directory
temp_dir = tempfile.mkdtemp(prefix='temp_', suffix='_dir')
print(f'Temporary directory created at: {temp_dir}')
# Clean up by removing the temporary directory
os.rmdir(temp_dir)
=============================================================================================================
import tempfile
import os


# Create a temporary directory
temp_dir = tempfile.TemporaryDirectory(prefix='temp_', suffix='_dir')


try:
    print(f'Temporary directory created at: {temp_dir.name}')
   
    # Create a file in the temporary directory
    with open(os.path.join(temp_dir.name, 'temp_file.txt'), 'w') as f:
        f.write('This is a temporary file.')


    # Verify the file creation
    print(f'File created in temp directory: {os.path.join(temp_dir.name, "temp_file.txt")}')
finally:
    # Explicitly clean up the temporary directory
    temp_dir.cleanup()
    print('Temporary directory cleaned up.')
================================================================================================================
import filecmp
# Create two directories with some files and subdirectories for comparison
import os
os.makedirs('dir1/subdir', exist_ok=True)
with open('dir1/file1.txt', 'w') as f:
    f.write('This is file1 in dir1')
os.makedirs('dir2/subdir', exist_ok=True)
with open('dir2/file1.txt', 'w') as f:
    f.write('This is file1 in dir2')
# Create dircmp object
d = filecmp.dircmp('dir1', 'dir2')
# Report the comparison
print("Report:")
d.report()
# Clean up
import shutil
shutil.rmtree('dir1')
shutil.rmtree('dir2')
===================================================================================================================
import filecmp
# Create two directories with some files and subdirectories for comparison
import os
os.makedirs('dir1/subdir', exist_ok=True)
with open('dir1/file1.txt', 'w') as f:
    f.write('This is file1 in dir1')
os.makedirs('dir2/subdir', exist_ok=True)
with open('dir2/file1.txt', 'w') as f:
    f.write('This is file1 in dir2')
# Create dircmp object
d = filecmp.dircmp('dir1', 'dir2')
# Report the comparison
print("Report:")
d.report()
# Clean up
import shutil
shutil.rmtree('dir1')
shutil.rmtree('dir2')
======================================================================================================================
import filecmp
import os
import shutil
# Recreate directories for demonstration
os.makedirs('dir1/subdir', exist_ok=True)
with open('dir1/subdir/file2.txt', 'w') as f:
    f.write('This is file2 in dir1')


os.makedirs('dir2/subdir', exist_ok=True)
with open('dir2/subdir/file2.txt', 'w') as f:
    f.write('This is file2 in dir2')


# Create dircmp object
d = filecmp.dircmp('dir1', 'dir2')


# Report partial closure
print("Partial Closure Report:")
d.report_partial_closure()


# Clean up
shutil.rmtree('dir1')
shutil.rmtree('dir2')
==========================================================================================================================
import csv
# Data to be written to the CSV file
data = [
    ["Name", "Age", "City"],
    ["A", 30, "New York"],
    ["B", 25, "Los Angeles"],
    ["C", 35, "Chicago"]
]
# Writing to a CSV file
with open('example.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)
print("Data written to example.csv")
# Reading from a CSV file
with open('example.csv', mode='r') as file:
    reader = csv.reader(file)
    for row in reader:
        print(row)
========================================================================================================================
import csv
with open('example.csv', mode='r') as csvfile:
    reader = csv.reader(csvfile, dialect='excel')
    for row in reader:
        print(row)
=====================================================================================================
import csv


# Data to be written
header = ['Product', 'Price', 'Quantity']
row = ['Laptop', 75000, 3]


# Writing to a CSV file
with open('products.csv', 'w', newline='') as file:
    writer = csv.writer(file)
   
    # Writing the header
    writer.writerow(header)
   
    # Writing a single row
    writer.writerow(row)


print("Data written to products.csv successfully.")
=====================================================================================
import csv


# Data to be written
header = ['Name', 'Age', 'City']
row = {'Name': 'Amit', 'Age': 28, 'City': 'Mumbai'}


# Writing to a CSV file
with open('people.csv', 'w', newline='') as file:
    writer = csv.DictWriter(file, fieldnames=header)
    
    # Writing the header
    writer.writeheader()
    
    # Writing a single row
    writer.writerow(row)


print("Data written to people.csv successfully.")
=================================================================================================
import csv


# Data to be written
header = ['Product', 'Price', 'Quantity']
rows = [
    ['Laptop', 75000, 3],
    ['Smartphone', 15000, 10],
    ['Tablet', 20000, 5]
]


# Writing to a CSV file
with open('inventory.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    
    # Writing the header
    writer.writerow(header)
    
    # Writing multiple rows
    writer.writerows(rows)


print("Data written to inventory.csv successfully.")

====================================================================================================
import pandas as pd
# Reading the CSV file
df = pd.read_csv('inventory.csv')
# Displaying the content
print(df)

=========================================================================================================
import pandas as pd


# Data to be written
data = {
    'Product': ['Laptop', 'Smartphone', 'Tablet'],
    'Price': [75000, 15000, 20000],
    'Quantity': [3, 10, 5]
}


# Creating a DataFrame
df = pd.DataFrame(data)


# Writing the DataFrame to a CSV file
df.to_csv('products.csv', index=False)


print("Data written to products.csv successfully.")


import keyword

# printing all keywords at once using "kwlist()"

print("The list of keywords is : ")

print(keyword.kwlist)

***
Output:
The list of keywords are: 
['False', 'None', 'True',"__peg_parser__ 'and', 'as', 'assert', 'async', 'await', 'break', 
'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 
'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']

***
#===========================================================================================================================
print(False == 0)
print(True == 1)

# True + True + True is  3
print(True + True + True)

# True + False + False is  1
print(True + False + False)

# None isn't equal to  0  or an empty list []
print(None == 0)
print(None == [])

#output:
***
True
True
3
1
False
False

***
#=============================================================================================================================

a = True
b = False

# Logical operations
print(a and b)  # AND: True if both a and b are True
print(a or b)   # OR: True if at least one of a or b is True
print(not a)    # NOT: Inverts the value of a


#===============================================================================================================================
# example 1
print(2 is 2)

# example 2
a = [1, 2, 3]
b = a
c = [1, 2, 3]

# True: a and b refer to the same object
print(a is b)  

# False: a and c have same value but are different objects
print(a is c)
#===========================================================================================================================

x = 0

# python if elif else statement
if x > 0:
    print("Positive")
elif x < 0:
    print("Negative")
else:
    print("Zero")
#===============================================================================================================================
# 'for' loop example
for num in range(3):
    if num == 2:
        continue  # Skip number 2
    print(num)
# Output: 0 1

# 'while' loop example
count = 0
while count < 4:
    count += 1
    if count == 3:
        break  # Exit the loop when count reaches 4
    print(count)
# Output: 1 2
#===============================================================================================================================
a, b = 4, 0


try:
    k = a // b  # Attempt integer division (4 // 0)
    print(k)
    
# This block catches the ZeroDivisionError
except ZeroDivisionError: 
    print("Can't divide by zero")

finally:
    # This block is always executed regardless of the exception
    print('This is always executed')


print("The value of a / b is : ")

# Will raise an AssertionError because b == 0
assert b != 0, "Divide by 0 error"  

# Division is attempted but will not reach due to assert
print(a / b)  

# Raise a TypeError if the strings are different
temp = "geeks for geeks"
if temp != "geeks":
    raise TypeError("Both the strings are different.")
***
Can't divide by zero
This is always executed
The value of a / b is :
AssertionError: Divide by 0 error

***
#===================================================================================================
import math as gfg

print(gfg.factorial(5))

#==============================================================================================
# import keyword
from math import factorial
import math
print(math.factorial(10))

# from keyword
print(factorial(10))

***
3628800
3628800
***
#-=============================================================================================
a = 15
b = 10

def add():
  
      # Add global variables a and b
    c = a + b  
    print(c)

add()  # Output: 25

def fun():
  
  # Local variable in fun()
    var = 10  

    def gun():
      
          # Modify var1 in the enclosing scope (fun)
        nonlocal var  
        var += 10  
        print(var)  

    gun() 

fun() # Output: 20
***
25
20
***
#====================================================================================================

#declaring a variable as None

var1 = none

 

If var1 is none:

  print(“It is a none variable”)

else:

print(“ It is not a none variable”)
#===================================================================

#declaring a variable as None

var1 = none

 

If var1 == none: #to check if the variable is none

  print(“It is a none variable”)

else:

print(“ It is not a none variable”)

#==================================================================================================================
var = “testing”



if not type(var) is int:

raise typerror( “ You can enter only integers”)

***
Output: Since the variable is not an integer, the user will see the error message “you can enter only integers”.

***
#-=====================================================================================================

Calculator Program
Objective: Create a simple calculator that performs basic arithmetic operations like addition, subtraction, multiplication, and division.
Skills Needed: Function creation, user input handling, conditionals, loops.

def add(x, y):
    return x + y

def subtract(x, y):
    return x - y

def multiply(x, y):
    return x * y

def divide(x, y):
    if y != 0:
        return x / y
    else:
        return "Error! Division by zero."

def main():
    print("Select operation:")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Divide")

    choice = input("Enter choice (1/2/3/4): ")

    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))

    if choice == '1':
        print(f"{num1} + {num2} = {add(num1, num2)}")
    elif choice == '2':
        print(f"{num1} - {num2} = {subtract(num1, num2)}")
    elif choice == '3':
        print(f"{num1} * {num2} = {multiply(num1, num2)}")
    elif choice == '4':
        print(f"{num1} / {num2} = {divide(num1, num2)}")
    else:
        print("Invalid input")

if __name__ == "__main__":
    main()

2. Student Grading System
Objective: Create a grading system that calculates the grade based on marks.
Skills Needed: Functions, conditionals, handling of multiple inputs.

def calculate_grade(marks):
    if marks >= 90:
        return "A"
    elif marks >= 75:
        return "B"
    elif marks >= 60:
        return "C"
    elif marks >= 50:
        return "D"
    else:
        return "F"

def main():
    name = input("Enter student's name: ")
    marks = float(input(f"Enter marks for {name}: "))
    grade = calculate_grade(marks)
    print(f"{name} received a grade: {grade}")

if __name__ == "__main__":
    main()


3. Fibonacci Sequence Generator
Objective: Generate the Fibonacci sequence up to a given number.
Skills Needed: Recursion, iteration, and function return values.

def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def main():
    num = int(input("Enter the number of terms in the Fibonacci sequence: "))
    print("Fibonacci sequence:")
    for i in range(num):
        print(fibonacci(i), end=" ")

if __name__ == "__main__":
    main()

4. Palindrome Checker
Objective: Create a program that checks if a given word or sentence is a palindrome (reads the same forwards and backwards).
Skills Needed: String manipulation, functions, conditionals.

def is_palindrome(string):
    cleaned_string = "".join(string.split()).lower()  # Remove spaces and convert to lowercase
    return cleaned_string == cleaned_string[::-1]

def main():
    input_string = input("Enter a word or sentence: ")
    if is_palindrome(input_string):
        print(f"'{input_string}' is a palindrome.")
    else:
        print(f"'{input_string}' is not a palindrome.")

if __name__ == "__main__":
    main()
Currency Converter
Objective: Convert an amount from one currency to another based on a given exchange rate.
Skills Needed: Functions, floating point numbers, user input, simple math.
Example:
def convert_currency(amount, exchange_rate):
    return amount * exchange_rate

def main():
    amount = float(input("Enter the amount in your currency: "))
    exchange_rate = float(input("Enter the exchange rate (to USD): "))
    converted_amount = convert_currency(amount, exchange_rate)
    print(f"The amount in USD is: {converted_amount}")

if __name__ == "__main__":
    main()

Contact Book
Objective: Implement a contact book where the user can add, delete, and view contacts with their name and phone number.
Skills Needed: Dictionary operations, functions, user input handling.
Example:
def add_contact(contact_book, name, phone_number):
    contact_book[name] = phone_number

def remove_contact(contact_book, name):
    if name in contact_book:
        del contact_book[name]
    else:
        print("Contact not found.")

def view_contacts(contact_book):
    if contact_book:
        print("Contacts:")
        for name, phone in contact_book.items():
            print(f"{name}: {phone}")
    else:
        print("No contacts found.")

def main():
    contact_book = {}
    while True:
        print("\nContact Book Menu:")
        print("1. Add Contact")
        print("2. Remove Contact")
        print("3. View Contacts")
        print("4. Exit")
        choice = input("Choose an option: ")

        if choice == '1':
            name = input("Enter contact name: ")
            phone = input("Enter phone number: ")
            add_contact(contact_book, name, phone)
        elif choice == '2':
            name = input("Enter contact name to remove: ")
            remove_contact(contact_book, name)
        elif choice == '3':
            view_contacts(contact_book)
        elif choice == '4':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()
Weather Converter (Celsius to Fahrenheit and vice versa)
Objective: Create a program that converts temperature values between Celsius and Fahrenheit.
Skills Needed: Functions, mathematical calculations, user input handling.
Example:

def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

def fahrenheit_to_celsius(fahrenheit):
    return (fahrenheit - 32) * 5/9

def main():
    print("Temperature Converter")
    choice = input("Convert from (C)elsius or (F)ahrenheit? ").lower()
    if choice == 'c':
        celsius = float(input("Enter temperature in Celsius: "))
        fahrenheit = celsius_to_fahrenheit(celsius)
        print(f"{celsius}째C is equal to {fahrenheit}째F.")
    elif choice == 'f':
        fahrenheit = float(input("Enter temperature in Fahrenheit: "))
        celsius = fahrenheit_to_celsius(fahrenheit)
        print(f"{fahrenheit}째F is equal to {celsius}째C.")
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()

ATM Banking System Simulation
Objective: Simulate an ATM system where the user can check balance, deposit money, withdraw money, and exit.
Skills Needed: Functions, conditionals, loops, and basic operations on variables.
Example:

def check_balance(balance):
    print(f"Your current balance is: ${balance}")

def deposit(balance, amount):
    balance += amount
    print(f"${amount} has been deposited. New balance is: ${balance}")
    return balance

def withdraw(balance, amount):
    if balance >= amount:
        balance -= amount
        print(f"${amount} has been withdrawn. New balance is: ${balance}")
    else:
        print("Insufficient funds.")
    return balance

def main():
    balance = 1000  # Starting balance
    while True:
        print("\nATM Menu:")
        print("1. Check Balance")
        print("2. Deposit")
        print("3. Withdraw")
        print("4. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            check_balance(balance)
        elif choice == '2':
            amount = float(input("Enter deposit amount: "))
            balance = deposit(balance, amount)
        elif choice == '3':
            amount = float(input("Enter withdrawal amount: "))
            balance = withdraw(balance, amount)
        elif choice == '4':
            print("Thank you for using the ATM!")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
